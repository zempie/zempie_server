"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const rpcController_1 = require("../controllers/rpcController");
const _common_1 = require("./_common");
const fileManager_1 = require("../services/fileManager");
const _convert_1 = require("../controllers/_convert");
const studioController_1 = require("../controllers/studio/studioController");
const studioAdminController_1 = require("../controllers/adminController/studioAdminController");
const apiVer = `/api/v1`;
exports.default = (router) => {
    // router.post(`${apiVer}/studio/developer`,   validateFirebaseIdToken, FileManager.uploadImage, convert(StudioController.createDeveloper));
    // router.patch(`${apiVer}/studio/developer`,    validateFirebaseIdToken, FileManager.uploadImage, convert(StudioController.updateDeveloper));
    // router.get( `${apiVer}/studio/developer`, validateFirebaseIdToken, convert(StudioController.getDeveloper) );
    router.post(`${apiVer}/studio/developer`, _common_1.validateFirebaseIdToken, _convert_1.default(studioController_1.default.signupDeveloper));
    router.post(`${apiVer}/studio/project`, _common_1.validateFirebaseIdToken, fileManager_1.default.uploadImage, _convert_1.default(studioController_1.default.createProject));
    router.get(`${apiVer}/studio/project`, _common_1.validateFirebaseIdToken, _convert_1.default(studioController_1.default.getProjects));
    router.get(`${apiVer}/studio/project/:id`, _common_1.validateFirebaseIdToken, _convert_1.default(studioController_1.default.getProject));
    router.patch(`${apiVer}/studio/project/:id`, _common_1.validateFirebaseIdToken, fileManager_1.default.uploadImage, _convert_1.default(studioController_1.default.updateProject));
    router.delete(`${apiVer}/studio/project/:id`, _common_1.validateFirebaseIdToken, _convert_1.default(studioController_1.default.deleteProject));
    router.post(`${apiVer}/studio/version`, _common_1.validateFirebaseIdToken, fileManager_1.default.uploadImage, _convert_1.default(studioController_1.default.createVersion));
    router.delete(`${apiVer}/studio/version/:id`, _common_1.validateFirebaseIdToken, _convert_1.default(studioController_1.default.deleteVersion));
    router.get(`${apiVer}/studio/verify-pathname/:pathname`, _common_1.validateFirebaseIdToken, _convert_1.default(studioController_1.default.verifyGamePathname));
};
// RpcController.generator( 'get-developer', StudioController.getDeveloper, true );
// RpcController.generator( 'set-developer', StudioController.updateDeveloper, true );
// RpcController.generator( 'get-projects', StudioController.getProjects, true );
// RpcController.generator( 'get-project', StudioController.getProject, true );
// RpcController.generator( 'verify-pathname', StudioController.verifyGamePathname, true );
// RpcController.generator( 'set-project', StudioController.updateProject, true );
// RpcController.generator( 'delete-project', StudioController.deleteProject, true );
// RpcController.generator( 'get-versions', StudioController.getVersions, true );
// RpcController.generator( 'get-version', StudioController.getVersion, true );
// RpcController.generator( 'create-version', StudioController.createVersion, true );
// RpcController.generator( 'set-version', StudioController.updateVersion, true );
rpcController_1.default.generator('admin-get-versions', studioAdminController_1.default.getVersions, true);
rpcController_1.default.generator('admin-get-version', studioAdminController_1.default.getVersion, true);
rpcController_1.default.generator('admin-set-version', studioAdminController_1.default.setVersion, true);
// RpcController.generator( 'delete-version', StudioController.deleteProject, true );
//# sourceMappingURL=studioRoute.js.map